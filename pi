-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

-- Player reference
local LocalPlayer = Players.LocalPlayer

-- Remotes
local meleeInflictRemote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("MeleeInflict")

-- Storage for the third argument
local thirdArgument = nil

-- Hook the __namecall metamethod
local mt = getrawmetatable(game)
local oldNamecall = mt.__namecall
setreadonly(mt, false)

mt.__namecall = function(self, ...)
    local method = getnamecallmethod()
    local args = {...}

    -- Check for calls to the 'MeleeInflict' remote
    if method == "FireServer" and self == meleeInflictRemote then
        -- Capture the third argument dynamically
        if args[1] and typeof(args[1]) == "table" and args[1][3] then
            thirdArgument = args[1][3]
        end
    end

    -- Proceed with the original call
    return oldNamecall(self, ...)
end

setreadonly(mt, true)

-- Function to attack all mobs
local function attackAllMobs()
    if thirdArgument then
        for _, mob in pairs(Workspace:WaitForChild("Live"):WaitForChild("Ragdolls"):GetDescendants()) do
            if mob:IsA("Model") then
                -- Construct the arguments dynamically
                local args = {
                    [1] = {
                        [1] = LocalPlayer.Character:FindFirstChild("Soul Scythe"), -- Replace with your weapon
                        [2] = mob,
                        [3] = thirdArgument -- Use the captured third argument
                    }
                }
                meleeInflictRemote:FireServer(unpack(args))
            end
        end
    else
        warn("Third argument not captured yet. Wait for a 'MeleeInflict' remote to fire.")
    end
end

-- Toggleable loop to attack all mobs every second
local autoAttackEnabled = false

while true do
    if autoAttackEnabled then
        attackAllMobs()
    end
    task.wait(0.1) -- Repeat every second
end
